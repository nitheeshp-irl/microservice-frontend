name: Build and Push to ECR

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: 194722430197.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPOSITORY: training/craftista_frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine Bump Type from Commit Message
        id: bump_type
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          if echo "$COMMIT_MSG" | grep -qE "BREAKING CHANGE|!:"; then
            echo "BUMP=major" >> $GITHUB_ENV
          elif echo "$COMMIT_MSG" | grep -iq "^feat:"; then
            echo "BUMP=minor" >> $GITHUB_ENV
          elif echo "$COMMIT_MSG" | grep -iq "^fix:"; then
            echo "BUMP=patch" >> $GITHUB_ENV
          else
            echo "No matching pattern, defaulting to patch."
            echo "BUMP=patch" >> $GITHUB_ENV
          fi

      - name: Determine Next Semantic Version
        id: get_version
        run: |
          IMAGE_TAGS=$(aws ecr describe-images \
            --repository-name $ECR_REPOSITORY \
            --region $AWS_REGION \
            --query 'imageDetails[].imageTags[]' \
            --output text | tr '\t' '\n' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' || true)

          if [[ -z "$IMAGE_TAGS" ]]; then
            NEXT_VERSION="1.0.0"
          else
            LAST_VERSION=$(echo "$IMAGE_TAGS" | sort -V | tail -n 1)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"

            case "$BUMP" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac

            NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "Next version: $NEXT_VERSION"

      - name: Build Docker Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$NEXT_VERSION .

      - name: Push Docker Image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$NEXT_VERSION

      - name: Tag Git Repo with Version (if not exists)
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          if git ls-remote --tags origin | grep -q "refs/tags/v$NEXT_VERSION$"; then
            echo "Tag v$NEXT_VERSION already exists. Skipping tag push."
          else
            git tag -a "v$NEXT_VERSION" -m "Release v$NEXT_VERSION"
            git push origin "v$NEXT_VERSION"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
