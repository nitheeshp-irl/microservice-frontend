name: Docker CI and EKS Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        env:
          ECR_REGISTRY: 194722430197.dkr.ecr.us-west-2.amazonaws.com
          ECR_REPOSITORY: training/craftista_frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Run Docker container for testing
        env:
          ECR_REGISTRY: 194722430197.dkr.ecr.us-west-2.amazonaws.com
          ECR_REPOSITORY: training/craftista_frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker run -d -p 3000:3000 --name microservice-frontend-container $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Wait for the container to be ready
        run: sleep 30

      - name: Test Docker container
        run: |
          curl -f http://localhost:3000 || exit 1

      - name: Push Docker image to Amazon ECR
        if: success()
        env:
          ECR_REGISTRY: 194722430197.dkr.ecr.us-west-2.amazonaws.com
          ECR_REPOSITORY: training/craftista_frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Clean up Docker container
        run: docker rm -f microservice-frontend-container

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update Kubernetes configuration
        run: |
          aws eks update-kubeconfig --name eks-poc --region us-west-2

      - name: Update Kustomize image
        working-directory: ./k8/overlays/development
        run: |
          kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        
      - name: Deploy RBAC
        working-directory: ./k8
        run: |
          kubectl apply -f base/rbac.yml

      - name: Deploy to EKS
        working-directory: ./k8
        run: |
          kustomize build overlays/development | kubectl apply -f -

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/frontend-deployment -n default